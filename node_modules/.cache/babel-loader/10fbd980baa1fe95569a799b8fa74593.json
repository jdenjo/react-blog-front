{"ast":null,"code":"import _objectWithoutProperties from \"/home/jdenjo/Documents/react-rails-blog/react-blog/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/jdenjo/Documents/react-rails-blog/react-blog/src/AuthRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nvar AuthRoute = function AuthRoute(props) {\n  var _props$isAuthenticate = props.isAuthenticated,\n      isAuthenticated = _props$isAuthenticate === void 0 ? false : _props$isAuthenticate,\n      _render = props.render,\n      Component = props.component,\n      restProps = _objectWithoutProperties(props, [\"isAuthenticated\", \"render\", \"component\"]); // The \"Component\" variable comes a prop that is assigned\n  // a React component function. In the JSX below, we use to render\n  // whatever component might be passed as a prop.\n  // Taking the remaining props (i.e. `...restProps` above)\n  // passing it (i.e. using spread `{...restProps}`) to a\n  // React element that is being rendered is referred to\n  // as \"forwarding props.\" Doing this will us to immediately share\n  // all props our own component with the rendered (e.g. onClick, className\n  // onSubmit, href, etc.)\n\n\n  return React.createElement(Route, Object.assign({}, restProps, {\n    render: function render(routeProps) {\n      if (isAuthenticated) {\n        // You can use any variable that is assigned a component\n        // function and render using JSX as follows:\n        if (typeof _render === \"function\") {\n          return _render(routeProps);\n        } else {\n          return React.createElement(Component, Object.assign({}, routeProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }));\n        }\n      } else {\n        return React.createElement(Redirect, {\n          to: \"/sign_in\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nexport default AuthRoute;","map":{"version":3,"sources":["/home/jdenjo/Documents/react-rails-blog/react-blog/src/AuthRoute.js"],"names":["React","Route","Redirect","AuthRoute","props","isAuthenticated","render","Component","component","restProps","routeProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,8BAMrBA,KANqB,CAEvBC,eAFuB;AAAA,MAEvBA,eAFuB,sCAEL,KAFK;AAAA,MAGvBC,OAHuB,GAMrBF,KANqB,CAGvBE,MAHuB;AAAA,MAIZC,SAJY,GAMrBH,KANqB,CAIvBI,SAJuB;AAAA,MAKpBC,SALoB,4BAMrBL,KANqB,+CAOzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SACE,oBAAC,KAAD,oBACMK,SADN;AAEE,IAAA,MAAM,EAAE,gBAAAC,UAAU,EAAI;AACpB,UAAIL,eAAJ,EAAqB;AACnB;AACA;AACA,YAAI,OAAOC,OAAP,KAAkB,UAAtB,EAAkC;AAChC,iBAAOA,OAAM,CAACI,UAAD,CAAb;AACD,SAFD,MAEO;AACL,iBAAO,oBAAC,SAAD,oBAAeA,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;AACF,OARD,MAQO;AACL,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAkBD,CAnCD;;AAqCA,eAAeP,SAAf","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst AuthRoute = props => {\n  const {\n    isAuthenticated = false,\n    render,\n    component: Component,\n    ...restProps\n  } = props;\n  // The \"Component\" variable comes a prop that is assigned\n  // a React component function. In the JSX below, we use to render\n  // whatever component might be passed as a prop.\n\n  // Taking the remaining props (i.e. `...restProps` above)\n  // passing it (i.e. using spread `{...restProps}`) to a\n  // React element that is being rendered is referred to\n  // as \"forwarding props.\" Doing this will us to immediately share\n  // all props our own component with the rendered (e.g. onClick, className\n  // onSubmit, href, etc.)\n  return (\n    <Route\n      {...restProps}\n      render={routeProps => {\n        if (isAuthenticated) {\n          // You can use any variable that is assigned a component\n          // function and render using JSX as follows:\n          if (typeof render === \"function\") {\n            return render(routeProps);\n          } else {\n            return <Component {...routeProps} />;\n          }\n        } else {\n          return <Redirect to=\"/sign_in\" />;\n        }\n      }}\n    />\n  );\n};\n\nexport default AuthRoute;\n"]},"metadata":{},"sourceType":"module"}