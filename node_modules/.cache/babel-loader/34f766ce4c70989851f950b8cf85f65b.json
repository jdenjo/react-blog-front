{"ast":null,"code":"// Requests\nvar BASE_URL = \"http://localhost:3000/api/v1\"; // Create a module of Question related fetch request methods\n\nvar Post = {\n  // fetch all questions from server\n  all: function all() {\n    return fetch(\"http://localhost:3000/posts.json\", {\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  // fetch a single question\n  one: function one(id) {\n    return fetch(\"\".concat(BASE_URL, \"/questions/\").concat(id), {\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  // creating a question\n  create: function create(params) {\n    // `params` is an object that represents a question\n    // { body: 'qBody', title: 'qTitle' }\n    return fetch(\"\".concat(BASE_URL, \"/questions\"), {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  // updating a question\n  update: function update(id, params) {\n    return fetch(\"\".concat(BASE_URL, \"/questions/\").concat(id), {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  delete: function _delete(id) {\n    return fetch(\"\".concat(BASE_URL, \"/questions/\").concat(id), {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n}; // This is a helper module with methods associated with creating\n// (and maybe later, destroying) a user session\n\nvar Session = {\n  create: function create(params) {\n    // `params` is an object that represents a user\n    // { email: 'some@email.com', password: 'some-password' }\n    return fetch(\"\".concat(BASE_URL, \"/session\"), {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  destroy: function destroy() {\n    return fetch(\"\".concat(BASE_URL, \"/session\"), {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n};\nvar User = {\n  current: function current() {\n    return fetch(\"\".concat(BASE_URL, \"/users/current\"), {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n};\nexport { Post, Session, User };","map":{"version":3,"sources":["/home/jdenjo/Documents/react-rails-blog/react-blog/src/components/requests.js"],"names":["BASE_URL","Post","all","fetch","credentials","then","res","json","one","id","create","params","method","headers","body","JSON","stringify","update","delete","Session","destroy","User","current"],"mappings":"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","sourcesContent":["// Requests\n\nconst BASE_URL = `http://localhost:3000/api/v1`;\n\n// Create a module of Question related fetch request methods\nconst Post = {\n  // fetch all questions from server\n  all() {\n    return fetch(`http://localhost:3000/posts.json`, { credentials: \"include\" }).then(\n      res => res.json()\n    );\n  },\n  // fetch a single question\n  one(id) {\n    return fetch(`${BASE_URL}/questions/${id}`, {\n      credentials: \"include\"\n    }).then(res => res.json());\n  },\n  // creating a question\n  create(params) {\n    // `params` is an object that represents a question\n    // { body: 'qBody', title: 'qTitle' }\n    return fetch(`${BASE_URL}/questions`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json());\n  },\n  // updating a question\n  update(id, params) {\n    return fetch(`${BASE_URL}/questions/${id}`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json());\n  },\n  delete(id) {\n    return fetch(`${BASE_URL}/questions/${id}`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n};\n\n// This is a helper module with methods associated with creating\n// (and maybe later, destroying) a user session\nconst Session = {\n  create(params) {\n    // `params` is an object that represents a user\n    // { email: 'some@email.com', password: 'some-password' }\n    return fetch(`${BASE_URL}/session`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json());\n  },\n  destroy() {\n    return fetch(`${BASE_URL}/session`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n};\n\nconst User = {\n  current() {\n    return fetch(`${BASE_URL}/users/current`, {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n};\n\nexport { Post, Session, User };\n"]},"metadata":{},"sourceType":"module"}