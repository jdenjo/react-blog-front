{"ast":null,"code":"// Requests\nvar BASE_URL = \"http://localhost:3000/\"; // Create a module of Question related fetch request methods\n\nvar Post = {\n  // fetch all questions from server\n  all: function all() {\n    return fetch(\"\".concat(BASE_URL, \"posts.json\")).then(function (res) {\n      return res.json();\n    });\n  },\n  // fetch a single question\n  one: function one(id) {\n    return fetch(\"\".concat(BASE_URL, \"posts/\").concat(id, \".json\")).then(function (res) {\n      return res.json();\n    });\n  },\n  // creating a question\n  create: function create(params) {\n    // `params` is an object that represents a question\n    // { body: 'qBody', title: 'qTitle' }\n    return fetch(\"\".concat(BASE_URL, \"posts\"), {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  // updating a question\n  update: function update(id, params) {\n    return fetch(\"\".concat(BASE_URL, \"/posts/\").concat(id), {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  delete: function _delete(id) {\n    return fetch(\"\".concat(BASE_URL, \"/posts/\").concat(id), {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n}; // This is a helper module with methods associated with creating\n// (and maybe later, destroying) a user session\n\nvar Session = {\n  create: function create(params) {\n    // `params` is an object that represents a user\n    // { email: 'some@email.com', password: 'some-password' }\n    return fetch(\"http://localhost:3000/sessions\", {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(function (res) {\n      return res.json();\n    });\n  },\n  destroy: function destroy() {\n    return fetch(\"\".concat(BASE_URL, \"sessions\"), {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n};\nvar User = {\n  current: function current() {\n    return fetch(\"\".concat(BASE_URL, \"users/current\"), {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(function (res) {\n      return res.json();\n    });\n  }\n};\nexport { Post, Session, User };","map":{"version":3,"sources":["/home/jdenjo/Documents/react-rails-blog/react-blog/src/components/requests.js"],"names":["BASE_URL","Post","all","fetch","then","res","json","one","id","create","params","method","credentials","headers","body","JSON","stringify","update","delete","Session","destroy","User","current"],"mappings":"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","sourcesContent":["// Requests\n\nconst BASE_URL = `http://localhost:3000/`;\n\n// Create a module of Question related fetch request methods\nconst Post = {\n  // fetch all questions from server\n  all() {\n    return fetch(`${BASE_URL}posts.json` ).then(\n      res => res.json()\n    );\n  },\n  // fetch a single question\n  one(id) {\n    return fetch(`${BASE_URL}posts/${id}.json` ).then(res => res.json());\n  },\n  // creating a question\n  create(params) {\n    // `params` is an object that represents a question\n    // { body: 'qBody', title: 'qTitle' }\n    return fetch(`${BASE_URL}posts`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json());\n  },\n  // updating a question\n  update(id, params) {\n    return fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json());\n  },\n  delete(id) {\n    return fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n};\n\n// This is a helper module with methods associated with creating\n// (and maybe later, destroying) a user session\nconst Session = {\n  create(params) {\n    // `params` is an object that represents a user\n    // { email: 'some@email.com', password: 'some-password' }\n    return fetch(`http://localhost:3000/sessions`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    }).then(res => res.json());\n  },\n  destroy() {\n    return fetch(`${BASE_URL}sessions`, {\n      method: \"DELETE\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n};\n\nconst User = {\n  current() {\n    return fetch(`${BASE_URL}users/current`, {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(res => res.json());\n  }\n};\n\nexport { Post, Session, User };\n"]},"metadata":{},"sourceType":"module"}